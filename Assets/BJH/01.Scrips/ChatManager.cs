using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using Photon.Chat;
using ExitGames.Client.Photon;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine.Networking;
using System;
using TMPro;

public class ChatBotResponse
{
    public string answer;
    public string task;
    public string data;
    public string island_id;
}

public class ChatManager : MonoBehaviourPun, IPointerDownHandler, IChatClientListener
{
    // chat
    public GameObject _chatBG, _yellow, _white, _black, _date;
    public RectTransform _rtContent;
    public TMP_InputField _chatInput;
    public Scrollbar _scrollbar;

    // chat rooms
    public List<string> chatChannelNames;

    // Photon Chat
    ChatAppSettings chatAppSettings;
    ChatClient chatClient;


    PlayerMove clickMove;

    // bool
    bool isChatRoomActive = false;

    public GameObject message;



    // 애니메이션
    public GameObject particle;
    public Transform TrParticle;
    public GameObject createdParticle;
    public Transform kkamang;
    public Animator chatJump;



    // 프로필
    // 모든 플레이어의 key : 닉네임, value : 캐릭터 이름
    public Dictionary<string, string> dicAllPlayerProfile = new Dictionary<string, string>();


    void Start()
    {
        isChatRoomActive = false;
        // alert.SetActive(false);
        _chatBG.SetActive(false);

        // 텍스트를 작성하고 엔터를 쳤을때 호출되는 함수 등록
        _chatInput.onSubmit.AddListener(OnSubmit);

        // photon chat 초기 설정
        PhotonChatSetting();

        // 초기 설정을 바탕으로 photon chat 입장
        Connect();
    }

    // Update is called once per frame
    void Update()
    {
        if (chatClient != null)
        {
            chatClient.Service();
        }
    }

    // 채팅창에서 엔터를 누르면 실행되는 함수

    void OnSubmit(string text)
    {
        if (text.Length == 0)
        {
            return;
        }

        // chatInput에 받아온 text를 photon chat을 사용해서 전송
        _chatInput.text = text;

        chatClient.PublishMessage(chatChannelNames[0], text);

        // chatInput 내용 초기화
        _chatInput.text = "";

        // chatInput 강제로 선택된 상태로
        _chatInput.ActivateInputField();

        if (text.Contains("까망"))
        {
            print("까망이를 호출했습니다.");
            StartCoroutine(CoKkamangWatingMent());
        }

        // ---------------------------------------------------------------------------------

        ChatInfo chatInfo = new ChatInfo();

        string island_id = Managers.Info.FamilyCode;
        string user_id = PhotonNetwork.NickName;

        DateTime currentTime = DateTime.Now;
        string datetiem = currentTime.ToString("yyyy-MM-dd HH:mm:ss");

        chatInfo.island_id = island_id;
        chatInfo.user_id = user_id;
        chatInfo.content = text;
        chatInfo.datetiem = datetiem;

        //Json 형식으로 값이 들어가지게 됨 -> 이쁘게 나오기 위해 true
        string aiJsonData = JsonUtility.ToJson(chatInfo, true);
        print(aiJsonData);

        //AI와 채팅을 한다!
        OnGetPost(aiJsonData);
    }

    // 까망이 대기 멘트 델리게이트
    IEnumerator CoKkamangWatingMent()
    {
        yield return new WaitForSeconds(1.5f);

        photonView.RPC("PunSendKkamangChat", RpcTarget.All, "잠시만 기다려보라냥!");

    }

    //Ai
    // 엔터 쳤을 때 -> 챗봇 보내는 내용
    // 서버에 게시물 조회 요청 -> HttpManager한테 알려주려고 함
    public void OnGetPost(string s)
    {
        string url = "http://221.163.19.218:1221/api/chatbot/conversation";

        //생성 -> 데이터 조회 -> 값을 넣어줌 
        HttpRequester requester = new HttpRequester(Define.RequestType.POST, Define.DataType.JSON, url, false);

        requester._body = s; // json data
        requester._onComplete = OnGetPostComplete;
        requester._onFailed = OnGetPostFailed;

        Managers.Http.SendRequest(requester);
    }

    public ChatBotResponse chatBotResponse;
    void OnGetPostComplete(DownloadHandler result)
    {
        //HttpAiPhotoData aiPhotoData = new HttpAiPhotoData();
        //aiPhotoData = JsonUtility.FromJson<HttpAiPhotoData>(result.text);


        print(result.text);

        chatBotResponse = new ChatBotResponse();
        chatBotResponse = JsonUtility.FromJson<ChatBotResponse>(result.text);

        if (chatBotResponse.task == "대기" || chatBotResponse.answer.Length <= 0 || chatBotResponse.answer == "No Response")
        {
            return;
        }

        photonView.RPC(nameof(PunSendKkamangChat), RpcTarget.All, chatBotResponse.answer);
        //// 생성된 게임오브젝트에서 ChatItem 컴포넌트 가져온다.
        //PhotonChatItem item = go.GetComponent<PhotonChatItem>();

        //// 가로, 세로를 세팅하고
        //item.SetText(chatBotResponse.answer, Color.black);

        //// 가져온 컴포넌트에서 SetText 함수 실행
        //item.SetText("까망이 : " + chatBotResponse.answer, Color.black);


        // 동기화
        //chatClient.PublishMessage(chatChannelNames[0], chatBotResponse.answer); // 채팅 보내는 함수



        //downloadHandler에 받아온 Json형식 데이터 가공하기
        //2.FromJson으로 형식 바꿔주기
        //ChatData chatData = JsonUtility.FromJson<ChatData>(result.text);

        //-----------------챗봇 넣기--------------

        //if (aiPhotoData.results.body.response.Trim() == "") return;
    }

    [PunRPC]
    public void PunSendKkamangChat(string chat)
    {
        // 채팅에 result.text출력하기
        int currChannelIdx = 0; // 임시

        // chatItem 생성함 (scrollView -> content 의 자식으로 등록)
        GameObject go = Instantiate(_black, _rtContent.transform);
        print("까망이 채팅 생성");

        // 까망이가 채팅을 보냈다는 UI를 노출하기
        StartCoroutine("CoKkamangMessageDelay");

        AreaScript area = go.GetComponent<AreaScript>();

        // 가로는 최대 600, 세로는 boxRect의 기존 사이즈대로
        area.boxRect.sizeDelta = new Vector2(600, area.boxRect.sizeDelta.y);

        area.textRect.GetComponent<TMP_Text>().text = chat;

        area.userNameText.text = "까망이";

        area.timeText.text = DateTime.Now.ToString("HH:mm");

        // 텍스트의 엔터 때문에 텍스트는 크고 박스는 작고.. 이럴 수 있어서
        // 리빌딩(?)
        Fit(area.boxRect);


        // 두 줄 이상이면 크기를 줄여가면서,
        // 한 줄이 아래로 내려가는 시점 바로 전 크기를 가로에 대입
        float x = area.textRect.sizeDelta.x + 55;
        float y = area.textRect.sizeDelta.y;

        if (y > 49) // 텍스트가 3줄 이상
        {
            for (int i = 0; i < 200; i++)
            {
                area.boxRect.sizeDelta = new Vector2(x - i * 2, area.boxRect.sizeDelta.y);

                Fit(area.boxRect);

                if (area.boxRect.sizeDelta.x <= 130)
                {
                    print(area.boxRect.sizeDelta.x);
                    break;
                }

                if (y != area.textRect.sizeDelta.y)
                {
                    area.boxRect.sizeDelta = new Vector2(x - (i * 2) + 2, y);
                    break;
                }
            }
        }
        else
        {
            area.boxRect.sizeDelta = new Vector2(x, y);
        }

        Invoke("ScrollDelay", 0.03f);

        // 고양이 소리
        SoundManager_LHS.instance.PlaySFX(SoundManager_LHS.ESfx.SFX_LodingCat);

        // 파티클
        createdParticle = Instantiate(particle, TrParticle.position, TrParticle.rotation);

        // 애니메이션
        chatJump.SetTrigger("ChatJump");

        Invoke("StopAnimation", 3f);


    }

    void StopAnimation()
    {
        chatJump.SetTrigger("StopJump");
        Destroy(createdParticle);
        print("점프 멈춰");

    }

    IEnumerator CoKkamangMessageDelay()
    {
        message.SetActive(true);

        yield return new WaitForSeconds(0.8f);

        message.SetActive(false);
    }

    void OnGetPostFailed(DownloadHandler result)
    {
        print("Chat 실패");
    }

    // 버튼을 누르면 채팅이 전송됨
    public void OnClickSendBtn()
    {
        SoundManager_LHS.instance.PlaySFX(SoundManager_LHS.ESfx.SFX_BUTTONON);

        if (_chatInput.text.Length == 0)
        {
            return;
        }

        string text = _chatInput.text;
        int currChannelIdx = 0; // 임시

        chatClient.PublishMessage(chatChannelNames[0], text);

        //현숙 추가 (보내는 사운드)
        SoundManager_LHS.instance.PlaySFX(SoundManager_LHS.ESfx.SFX_BtnAdd);

        // inputChat 내용 초기화
        _chatInput.text = "";

        // inputChat 강제로 선택된 상태로
        _chatInput.ActivateInputField();

        if (text.Contains("까망"))
        {
            print("까망이를 호출했습니다.");
            StartCoroutine(CoKkamangWatingMent());
        }

        // ---------------------------------------------------------------------------------

        ChatInfo chatInfo = new ChatInfo();

        string island_id = Managers.Info.FamilyCode;
        string user_id = PhotonNetwork.NickName;

        DateTime currentTime = DateTime.Now;
        string datetiem = currentTime.ToString("yyyy-MM-dd HH:mm:ss");

        chatInfo.island_id = island_id;
        chatInfo.user_id = user_id;
        chatInfo.content = text;
        chatInfo.datetiem = datetiem;

        //Json 형식으로 값이 들어가지게 됨 -> 이쁘게 나오기 위해 true
        string aiJsonData = JsonUtility.ToJson(chatInfo, true);
        print(aiJsonData);

        //AI와 채팅을 한다!
        OnGetPost(aiJsonData);
    }

    // 포톤 초기 설정
    void PhotonChatSetting()
    {
        //포톤 설정을 가져와서 ChatAppSettings 에 설정하자.
        AppSettings photonSettings = PhotonNetwork.PhotonServerSettings.AppSettings;

        // 위 설정을 가지고 ChatAppSettings 셋팅
        chatAppSettings = new ChatAppSettings();
        chatAppSettings.AppIdChat = photonSettings.AppIdChat;
        chatAppSettings.AppVersion = photonSettings.AppVersion;
        chatAppSettings.FixedRegion = photonSettings.FixedRegion;
        chatAppSettings.NetworkLogging = photonSettings.NetworkLogging;
        chatAppSettings.Protocol = photonSettings.Protocol;
        chatAppSettings.EnableProtocolFallback = photonSettings.EnableProtocolFallback;
        chatAppSettings.Server = photonSettings.Server;
        chatAppSettings.Port = (ushort)photonSettings.Port;
        chatAppSettings.ProxyServer = photonSettings.ProxyServer;
    }

    // 설정을 토대로 연결
    void Connect()
    {
        chatClient = new ChatClient(this);

        // 채팅할 때 NickName 설정
        chatClient.AuthValues = new Photon.Chat.AuthenticationValues(PhotonNetwork.NickName);

        // 초기설정을 이용해서 채팅서버에 연결 시도
        chatClient.ConnectUsingSettings(chatAppSettings);
    }

    // 채팅을 보내는 함수
    void CreateChat(string sender, string text, Color color)
    {
        GameObject go;
        AreaScript area;


        // 내가 보낸거라면?
        if (sender == PhotonNetwork.NickName)
        {
            print("내가 보냄");
            go = Instantiate(_yellow, _rtContent);
            area = go.GetComponent<AreaScript>();
        }
        else
        {
            print("상대가 보냄");
            go = Instantiate(_white, _rtContent);
            area = go.GetComponent<AreaScript>();
            area.userNameText.text = sender;

            // 상대의 프로필 이미지 가져오기
            print(sender);
            area.profileImg.sprite = Resources.Load<Sprite>("member/" + dicAllPlayerProfile[sender]);

        }


        // 가로는 최대 600, 세로는 boxRect의 기존 사이즈대로
        area.boxRect.sizeDelta = new Vector2(600, area.boxRect.sizeDelta.y);

        area.textRect.GetComponent<TMP_Text>().text = text;

        // 텍스트의 엔터 때문에 텍스트는 크고 박스는 작고.. 이럴 수 있어서
        // 리빌딩(?)
        Fit(area.boxRect);


        // 두 줄 이상이면 크기를 줄여가면서,
        // 한 줄이 아래로 내려가는 시점 바로 전 크기를 가로에 대입
        float x = area.textRect.sizeDelta.x + 70;
        float y = area.textRect.sizeDelta.y;

        if (y > 49) // 텍스트가 3줄 이상
        {
            for (int i = 0; i < 200; i++)
            {
                area.boxRect.sizeDelta = new Vector2(x - i * 2, area.boxRect.sizeDelta.y);

                Fit(area.boxRect);

                if (area.boxRect.sizeDelta.x <= 130)
                {
                    break;
                }

                if (y != area.textRect.sizeDelta.y)
                {
                    area.boxRect.sizeDelta = new Vector2(x - (i * 2) + 2, y);
                    break;
                }
            }
        }
        else
        {
            area.boxRect.sizeDelta = new Vector2(x, y);
        }

        area.timeText.text = DateTime.Now.ToString("HH:mm");

        // 시간
        //DateTime t = DateTime.Now;
        //area.time = t.ToString("yyyy-MM-dd-HH-dd");
        //area.user = sender;

        //// 현재 것은 항상 새로운 시간 대입
        //int hour = t.Hour;
        //if (t.Hour == 0)
        //{
        //    hour = 12;
        //}
        //else if (t.Hour > 12)
        //{
        //    hour -= 12;
        //}
        //area.timeText.text = (t.Hour > 12 ? "오후" : "오전") + hour + " : " + t.Minute.ToString("D2");


        // 이전 것과 날짜가 다르면 날짜영역 보이기
        //if (lastArea != null && lastArea.time.Substring(0, 10) != area.time.Substring(0, 10))
        //{
        //    Transform curDataArea = Instantiate(date).transform;
        //    curDataArea.SetParent(rtContent.transform, false);
        //    curDataArea.SetSiblingIndex(curDataArea.GetSiblingIndex() - 1);

        //    string week = "";
        //    switch (t.DayOfWeek)
        //    {
        //        case DayOfWeek.Sunday:
        //            week = "일";
        //            break;
        //        case DayOfWeek.Monday:
        //            week = "월";
        //            break;
        //        case DayOfWeek.Tuesday:
        //            week = "화";
        //            break;
        //        case DayOfWeek.Wednesday:
        //            week = "수";
        //            break;
        //        case DayOfWeek.Thursday:
        //            week = "목";
        //            break;
        //        case DayOfWeek.Friday:
        //            week = "금";
        //            break;
        //        case DayOfWeek.Saturday:
        //            week = "토";
        //            break;
        //    }
        //    curDataArea.GetComponent<AreaScript>().dataText.text = t.Year + "년 " + t.Month + "월 " + t.Day + "일 " + week + "요일";

        //}


        // 스크롤바가 위로 올라간 상태에서 새 메시지를 받으면 맨 아래로 내리지 않음
        //if (!isSend && !isBottom)
        //{
        //    return;
        //}
        Invoke("ScrollDelay", 0.03f);



        // chatItem 생성함 (scrollView -> content 의 자식으로 등록)
        //GameObject go = Instantiate(chatItemFactory, trContent);

        // 생성된 게임오브젝트에서 ChatItem 컴포넌트 가져온다.
        //PhotonChatItem item = go.GetComponent<PhotonChatItem>();

        // 가로, 세로를 세팅하고
        //item.SetText(message, color);

        // 가져온 컴포넌트에서 SetText 함수 실행
        //item.SetText(sender + " : " + message, color);
    }

    // 강제로 채팅박스 조정
    void Fit(RectTransform rect) => LayoutRebuilder.ForceRebuildLayoutImmediate(rect);

    void ScrollDelay() => _scrollbar.value = 0;


    public void OnclickCloseBtn()
    {
        isChatRoomActive = false;
        _chatBG.SetActive(false);
    }

    public void OnClickChatBtn()
    {
        isChatRoomActive = true;
        _chatBG.SetActive(true);

    }


#if PC
    //public void OnClickChatBtn()
    //{
    //    if(isChatRoomActive) // true일 때 누르면? 즉, 채팅룸이 꺼지면
    //    {
    //        //clickMove.canMove = true;

    //        isChatRoomActive = false;
    //        chatScrollView.SetActive(isChatRoomActive);

    //        isChatExcept = false;
    //        chatExcept.SetActive(isChatExcept);
    //    }

    //    else if(!isChatRoomActive) // false일 때 누르면? 즉, 채팅룸이 켜지면
    //    {
    //        //clickMove.canMove = false;

    //        isChatRoomActive = true;
    //        chatScrollView.SetActive(isChatRoomActive);

    //        isChatExcept = true;
    //        chatExcept.SetActive(isChatExcept);
    //    }
    //}

    //// chatRoom이 실행되는 중에
    //// 배경을 클릭하면 chatRoom이 비활성화된다.
    //private void OnMouseDown()
    //{
    //    if (isChatRoomActive)
    //    {
    //        isChatRoomActive = false;
    //        chatScrollView.SetActive(isChatRoomActive);

    //        isChatExcept = false;
    //        chatExcept.SetActive(isChatExcept);
    //    }
    //}
#endif

    public void OnPointerDown(PointerEventData eventData)
    {
        //    // 채팅룸이 열려있는 상태에서 빈 ui를 선택하면 채팅룸이 사라진다.
        //    if(isChatRoomActive == true && EventSystem.current.IsPointerOverGameObject(eventData.pointerId)) {
        //        chatScrollView.SetActive(false);
        //        isChatRoomActive = false;
        //    }
    }


    public void DebugReturn(DebugLevel level, string message)
    {
    }

    public void OnDisconnected()
    {
    }

    public void OnConnected()
    {
        print("**** 채팅 서버 접속 성공 ****");
        // 채널 추가
        if (chatChannelNames.Count > 0)
        {
            chatClient.Subscribe(chatChannelNames.ToArray());
        }

        // 나의 상태를 온라인으로 한다.
        chatClient.SetOnlineStatus(ChatUserStatus.Online);
    }

    public void OnChatStateChange(ChatState state)
    {
    }

    public void OnGetMessages(string channelName, string[] senders, object[] messages)
    {
        SoundManager_LHS.instance.PlaySFX(SoundManager_LHS.ESfx.SFX_BUTTONOFF);
        for (int i = 0; i < senders.Length; i++)
        {
            print(nameof(OnGetMessages));
            CreateChat(senders[i], messages[i].ToString(), Color.black);
        }
    }

    public void OnPrivateMessage(string sender, object message, string channelName)
    {
    }

    public void OnSubscribed(string[] channels, bool[] results)
    {
        for (int i = 0; i < channels.Length; i++)
        {
            print("**** 채널 [" + channels[i] + "] 추가 성공");
        }
    }

    public void OnUnsubscribed(string[] channels)
    {
    }

    public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
    {
    }

    public void OnUserSubscribed(string channel, string user)
    {
    }

    public void OnUserUnsubscribed(string channel, string user)
    {
    }

    // scroll view에 chatitem이 많아지면 자동으로 스크롤을 최신 chat으로 내려준다.
    //public RectTransform scrollView;
    //public RectTransform rtContent;
    //IEnumerator AutoScrollBottom()
    //{
    //    yield return 0;


    //    // 만약 chat item이 scroll view보다 커지면
    //    if (rtContent.sizeDelta.y > scrollView.sizeDelta.y)
    //    {
    //        // 마지막으로 전송된 채팅이 scroll view 바닥에 닿았다면?
    //        if (prevContentH - scrollView.sizeDelta.y <= scrollView.anchoredPosition.y) // position : 3D세상의 피봇 위치, anchoredPosition이 실제 인스펙터 창에 나오는 x, y값이 들어있음
    //        {
    //            // content의 y값을 재설정한다.
    //            rtContent.anchoredPosition = new Vector2(0, rtContent.sizeDelta.y - scrollView.sizeDelta.y);
    //        }

    //        // content의 y값을 새로 전송된 채팅의 y값만큼 증가시킨다.
    //    }
    //}
}
